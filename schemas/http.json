{
	"auth": [
		{
			"method": "post",
			"url": "/auth/register",
			"body": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["email", "username", "password", "type"],
				"properties": {
					"email": {
						"type": "string",
						"format": "email"
					},
					"username": {
						"$ref": "common.json#/username"
					},
					"password": {
						"$ref": "common.json#/password"
					},
					"type": {
						"$ref": "user.json#/properties/type"
					}
				}
			},
			"response": {
				"200": true,
				"400": {
					"enum": ["Email already registered.","Username already taken."]
				}
			},
			"title": "Register",
			"description": "Password rule to define."
		},
		{
			"method": "put",
			"url": "/auth/login",
			"body": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["user", "password"],
				"properties": {
					"user": {
						"oneOf": [
							{
								"$ref": "common.json#/username"
							},
							{
								"type": "string",
								"format": "email"
							}
						]
					},
					"password": {
						"$ref": "common.json#/password"
					}
				}
			},
			"response": {
				"200": {
					"type": "object",
					"required": ["user", "token"],
					"properties": {
						"user": { "$ref": "user.json#" },
						"token": { "type": "string" }
					}
				},
				"400": {
					"enum": ["Wrong password.", "Wrong user."]
				}
			},
			"title": "Login",
			"description": ""
		}
	],
	"user": [
		{
			"method": "get",
			"url": "/user",
			"query": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["_id", "project"],
				"properties": {
					"_id": {
						"$ref": "common.json#/_id"
					},
					"project": {
						"enum": ["FULL","SMALL"]
					}
				}
			},
			"response": {
				"200": {
					"$ref": "user.json#"
				}
			},
			"title": "Get user",
			"description": "The 'project' field can be either 'full' or 'small' (username, picture, uni, rating, online)."
		},
		{
			"method": "get",
			"url": "/user/top",
			"query": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["sort", "page"],
				"properties": {
					"sort": {
						"enum": ["RATING"]
					},
					"page": {
						"type": "integer",
						"minimum": 0
					}
				}
			},
			"response": {
				"200": {
					"type": "array",
					"items": {
						"$ref": "user.json#"
					}
				}
			},
			"title": "Rankings",
			"description": "Maximum distance is 30. There will probably be more params to specialize the search."
		},
		{
			"method": "get",
			"url": "/user/search",
			"query": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["text", "page"],
				"properties": {
					"text": {
						"$ref": "common.json#/username"
					},
					"page": {
						"type": "integer",
						"minimum": 0
					}
				}
			},
			"response": {
				"200": {
					"type": "array",
					"items": {
						"$ref": "user.json#"
					}
				}
			},
			"title": "Search by username",
			"description": "Results per page are 20."
		},
		{
			"method": "delete",
			"url": "/user",
			"body": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"properties": {
					"username": {"$ref": "common.json#/username"}
				}
			},
			"response": {
				"200": true,
				"400": {
					"enum": ["Wrong password"]
				}
			},
			"title": "Delete account",
			"description": "Asks for username as a captcha."
		},
		{
			"method": "put",
			"url": "/user/picture",
			"headers": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["Content-Type"],
				"properties": {
					"Content-Type": {
						"const": "multipart/form-data"
					}
				}
			},
			"body": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["picture"],
				"properties": {
					"picture": true
				}
			},
			"response": {
				"200": true
			},
			"title": "Set profile picture",
			"description": ""
		},
		{
			"method": "get",
			"url": "/user/picture",
			"query": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["_id","size"],
				"properties": {
					"_id": {
						"$ref": "common.json#/_id"
					},
					"size": {
						"enum": ["small","medium","large"]
					}
				}
			},
			"response": {
				"200": true,
				"404": {
					"enum": ["Not found"]
				}
			},
			"title": "Get profile picture",
			"description": ""
		},
		{
			"method": "put",
			"url": "/user/add-friend",
			"body": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"who": { "$ref": "common.json#/_id"}
			},
			"response": {
				"200": true
			},
			"title": "Add friend",
			"description": ""
		},
		{
			"method": "put",
			"url": "/user/respond-news",
			"body": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["news","response"],
				"properties": {
					"news": {
						"$ref": "common.json#/_id"
					},
					"response": {
						"enum": ["y","n"]
					}
				}
			},
			"response": {
				"200": true
			},
			"title": "Respond friend request",
			"description": ""
		},
		{
			"method": "put",
			"url": "/user/remove-friend",
			"body": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["who"],
				"properties": {
					"who": {
						"$ref": "common.json#/_id"
					}
				}
			},
			"response": {
				"200": true
			},
			"title": "Remove friend",
			"description": ""
		},
		{
			"method": "put",
			"url": "/user/block-user",
			"body": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["who", "scopes"],
				"properties": {
					"who": {
						"$ref": "common.json#/_id"
					},
					"scopes": {
						"type": "object",
						"required": ["challenge","friend","chat"],
						"properties": {
							"challenge": {
								"type": "boolean"
							},
							"friendship": {
								"type": "boolean"
							},
							"chat": {
								"type": "boolean"
							}
						}
					}
				}
			},
			"response": {
				"200": true
			},
			"title": "Block user.",
			"description": "Scopes must be true to be blocked."
		},
		{
			"method": "put",
			"url": "/user/unblock-user",
			"body": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["who"],
				"properties": {
					"who": {
						"$ref": "common.json#/_id"
					}
				}
			},
			"response": {
				"200": true
			},
			"title": "Unblock user",
			"description": ""
		}
	],
	"uni": [
		{
			"method": "get",
			"url": "/uni",
			"query": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["_id", "project"],
				"properties": {
					"_id": {
						"$ref": "common.json#/_id"
					},
					"project": {
						"enum": ["FULL","SMALL"]
					}
				}
			},
			"response": {
				"200": true
			},
			"title": "Get uni",
			"description": ""
		},
		{
			"method": "get",
			"url": "/user/top",
			"query": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"type": "object",
				"required": ["sort", "page"],
				"properties": {
					"sort": {
						"enum": ["USERS_RATING"]
					},
					"page": {
						"type": "integer",
						"minimum": 0
					}
				}
			},
			"response": {
				"200": {
					"type": "array",
					"items": {
						"$ref": "uni.json#"
					}
				}
			},
			"title": "Rankings",
			"description": "Maximum distance is 30. There will probably be more params to specialize the search."
		},
	],
	"team": [
		{
			"method": "get",
			"url": "/team",
			"query": {
				"_id": "5ab1768bceec0418f52e198f"
			},
			"response": {
				"200": [
					"Team"
				],
				"400": [
					"Bad Request"
				],
				"404": [
					"Not Found"
				]
			},
			"title": "Get team",
			"description": ""
		},
		{
			"method": "put",
			"url": "/team/invite",
			"query": {
				"team": "_id",
				"invited": "_id"
			},
			"response": {
				"200": [
					"OK"
				],
				"400": [
					"Bad Request"
				]
			},
			"title": "Invite user to team",
			"description": "Invite 'invited' user in 'team'. The user who invites must be a team admin."
		},
		{
			"method": "put",
			"url": "/team/respond-invite",
			"query": {
				"team": "_id",
				"response": [
					"y",
					"n"
				]
			},
			"response": {
				"200": [
					"OK"
				]
			},
			"title": "Respond invite",
			"description": ""
		},
		{
			"method": "put",
			"url": "/team/challenge",
			"query": {
				"team": "_id",
				"enemy": "_id"
			},
			"response": {
				"200": [
					"OK"
				],
				"400": [
					"Bad Request"
				]
			},
			"title": "Challenge team",
			"description": "In order to challenge the user must be a team admin."
		},
		{
			"method": "put",
			"url": "/team/respond-news",
			"query": {
				"team": "_id",
				"enemy": "_id",
				"response": [
					"y",
					"n"
				]
			},
			"response": {
				"200": [
					"OK"
				],
				"400": [
					"Bad Request"
				]
			},
			"title": "Respond team challenge",
			"description": "In order to respond the challenge the user must be team admin."
		},
		{
			"method": "post",
			"url": "/team/create",
			"data": {
				"name": "bestTeamEver",
				"invited": [
					"_ids"
				]
			},
			"response": {
				"200": [
					"OK"
				],
				"400": [
					"Bad Request",
					"Name already taken"
				]
			},
			"title": "Create team",
			"description": "Team names follow the same rules of usernames."
		},
		{
			"method": "delete",
			"url": "/team",
			"query": {
				"_id": "5abbd738ca93b62b48ff2f3b"
			},
			"response": {
				"200": [
					"OK"
				]
			},
			"title": "Delete team",
			"description": "Rules TODO"
		}
	],
	"game": [
		{
			"method": "put",
			"url": "/game/search",
			"body": {
				"required": ["type"],
				"properties": {
					"type": {
						"$ref": "common.json#/game_type"
					},
					"extra": {
						"properties": {
							"team": {
								"$ref": "common.json#/_id"
							}
						}
					}
				}
			},
			"response": {
				"200": true
			},
			"title": "Enter the matchmaker",
			"description": "If a team-type game is requested, the team _id must be passed."
		},
		{
			"method": "put",
			"url": "/game/stop-search",
			"body": {
				"required": ["type"],
				"properties": {
					"type": {
						"$ref": "common.json#/game_type"
					},
					"extra": {
						"properties": {
							"team": {
								"$ref": "common.json#/_id"
							}
						}
					}
				}
			},
			"response": {
				"200": true
			},
			"title": "Exit the matchmaker",
			"description": "If a team-type game is requested, the team _id must be passed."
		},
	]
}
